.actual = list.pass.ex, .expected = list.pass.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = list.fail.ex, .expected = list.pass.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = list.pass.ex, .expected = list.fail.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = numvec.fail.ex, .expected = list.fail.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = numvec.fail.ex, .expected = list.pass.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = numvec.fail.ex, .expected = numvec.pass.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = numvec.pass.ex, .expected = numvec.fail.ex),
gives_warning()
)
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = numvec.pass.ex, .expected = numvec.fail.ex),
gives_warning()
)
})
source('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
.name <- 2
is.character(.name)
source('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
stopifnot(is.character(.name))
source('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
source('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/tests/dest_test.R')
source('C:/Users/a421356/R-GitHub/SCsim/tests/test-destination.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/tests/test-destination.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/tests/')
library(testthat)
auto_test(
code_path = file.path(getwd(), 'R'),
test_path = file.path(getwd(), 'inst', 'tests')
)
lst <- list(high = 0.5, low = 0.5)
is.list(lst)
sum(lst)
lst[[1]] + lst[[2]]
sum(as.numeric(lst))
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = list.pass.ex, .expected = list.pass.ex, .bias = bias.pass,
.schedule = schedule.pass)
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
destination <- function(.days, .actual, .expected,
.bias = list(high = 0.5, low = 0.5),
.schedule = list(open = 6, ordering = 6),
.name = NULL, .region = NULL, .on_hand_inventory = NULL) {
# Error checking for required inputs --------------------------------------
stopifnot(length(.days) == 1); stopifnot(is.numeric(.days))
stopifnot(length(.bias) == 2); stopifnot(names(.bias) %in% c('high', 'low'));
stopifnot(sum(as.numeric(.bias)) == 1)
if (length (.actual) == 2) {
stopifnot(length(.actual) == 2 & is.list(.actual) & names(.actual) %in% c("mean", "sd"))
} else {
stopifnot(length(.actual) == .days & is.numeric(.actual))
}
if (length (.expected) == 2) {
stopifnot(length(.expected) == 2 & is.list(.expected) & names(.expected) %in% c("mean", "sd"))
} else {
stopifnot(length(.expected) == .days & is.numeric(.expected))
}
# Error checking for optional inputs --------------------------------------
if (is.null(.name)) {
.name <- "sample_name"
} else {
stopifnot(length(.name) == 1)
stopifnot(is.character(.name))
}
if (is.null(.region)) {
.region <- "sample_region"
} else {
stopifnot(length(.region) == 1)
stopifnot(is.character(.region))
}
if (is.null(.on_hand_inventory)) {
.on_hand_inventory <- numeric(length = .days)
} else {
stopifnot(length(.on_hand_inventory) == 1)
stopifnot(is.numeric(.on_hand_inventory))
.on_hand_inventory <- c(.on_hand_inventory, numeric(length = (.days - 1)))
}
if (is.null(.days_open_per_week)) {
.days_open_per_week = 6
} else {
stopifnot(length(.days_open_per_week) == 1)
stopifnot(is.numeric(.days_open_per_week))
}
if (is.null(.days_ordering_per_week)) {
.days_ordering_per_week = 6
} else {
stopifnot(length(.days_ordering_per_week) == 1)
stopifnot(is.numeric(.days_ordering_per_week))
}
# Return Statement --------------------------------------------------------
return(TRUE)
}
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
source(file.path(getwd(), 'R', 'destObject.R'))
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
expect_that(
destination(.days = days.ex, .name = char.pass.ex, .region = char.pass.ex,
.actual = list.pass.ex, .expected = list.pass.ex, .bias = bias.pass,
.schedule = schedule.pass),
is_true()
)
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
test_dir(file.path(getwd(), 'inst', 'tests'))
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/inst/tests/')
getwd()
source(file.path('~', 'R-GitHub', 'SCsim', 'R', 'destObject.R'))
source(file.path('~', 'Users', 'R-GitHub', 'SCsim', 'R', 'destObject.R'))
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/inst/tests/')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-destination.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/inst/tests/')
expect_that(
destination(.days = days, .name = char.pass, .region = char.pass,
.actual = list.pass, .expected = list.pass, .bias = bias.pass,
.schedule = schedule.pass),
is_true()
)
expect_that(
destination(.days = days, .name = char.pass, .region = char.pass,
.actual = list.pass, .expected = list.pass, .bias = bias.pass,
.schedule = schedule.pass),
is_true()
#     is_a("destination")
)
destination(.days = days, .name = char.pass, .region = char.pass,
.actual = list.pass, .expected = list.pass, .bias = bias.pass,
.schedule = schedule.pass)
traceback()
library(roxygen2)
#' Supply Chain Simulation Project
#'
#' This project intends to simulate the supply chain for raw materials and finished goods.
#' It is extensible, and can simulate from sample statistics or historical data. The simulation
#' also automatically determines which type of data it is presented with. Also, new & novel
#' ordering strategies can be added to the code base with ease.
#'
#' Additionally, effort has been added to make the simulation run as fast as possible by utilizing
#' parallel processing for the largest chunks.
#'
#' @name SCsim-package
#' @aliases SCsim
#' @docType package
#' @title Supply Chain Simulation Project
#' @author Robert Smith <rob_smith@goodyear.com>
#' @keywords package
#' @import ggplot2 plyr parallel triangle xtable knitr scales roxygen2 devtools
roxygen()
devtools::load_all(".")
source('C:/Users/a421356/R-GitHub/SCsim/R/destObject.R')
devtools::load_all(".")
?ReferenceClasses
devtools::load_all(".")
?referenceClasses
?ReferenceClasses
.bd <- setRefClass(
"background_data",
fields = list(
total_days = "numeric",
name = "character",
region = "character",
strategy = "character",
shipment_size = "numeric",
orders_per_week = "numeric"
),
methods = list(
getTotalDays = function() return(total_days);,
getName = function() return(name);,
getRegion = function() return(region);,
getStrategy = function() return(strategy);,
getShipmentSize = function() return(shipment_size);,
getOrdersPerWeek = function() return(orders_per_week);
)
background_class <- function(TOTAL_DAYS, NAME, REGION, STRATEGY, SHIPMENT_SIZE, ORDERS_PER_WEEK) {
temp <- .bd$new(total_days = TOTAL_DAYS, name = NAME, region = REGION,
strategy = STRATEGY, shipment_size = SHIPMENT_SIZE,
orders_per_week = ORDERS_PER_WEEK)
return(temp)
}
.bd <- setRefClass(
"background_data",
fields = list(
total_days = "numeric",
name = "character",
region = "character",
strategy = "character",
shipment_size = "numeric",
orders_per_week = "numeric"
),
methods = list(
getTotalDays = function() {return(total_days)},
getName = function() {return(name)},
getRegion = function() {return(region)},
getStrategy = function() {return(strategy)},
getShipmentSize = function() {return(shipment_size)},
getOrdersPerWeek = function() {return(orders_per_week)}
)
background_class <- function(TOTAL_DAYS, NAME, REGION, STRATEGY, SHIPMENT_SIZE, ORDERS_PER_WEEK) {
temp <- .bd$new(total_days = TOTAL_DAYS, name = NAME, region = REGION,
strategy = STRATEGY, shipment_size = SHIPMENT_SIZE,
orders_per_week = ORDERS_PER_WEEK)
return(temp)
}
.bd <- setRefClass(
"background_data",
fields = list(
total_days = "numeric",
name = "character",
region = "character",
strategy = "character",
shipment_size = "numeric",
orders_per_week = "numeric"
),
methods = list(
getTotalDays = function() {return(total_days)},
getName = function() {return(name)},
getRegion = function() {return(region)},
getStrategy = function() {return(strategy)},
getShipmentSize = function() {return(shipment_size)},
getOrdersPerWeek = function() {return(orders_per_week)}
)
background_class <- function(TOTAL_DAYS, NAME, REGION, STRATEGY, SHIPMENT_SIZE, ORDERS_PER_WEEK) {
temp <- .bd$new(total_days = TOTAL_DAYS, name = NAME, region = REGION,
strategy = STRATEGY, shipment_size = SHIPMENT_SIZE,
orders_per_week = ORDERS_PER_WEEK)
return(temp)
}
a <- background_class(100, "fac", "rgn", "a", 1500, 6)
a$getTotalDays()
a$getName()
toupper("abc")
library(testthat)
days.pass <- c(100,1000,10000)
days.fail <- list(bool = TRUE,  char = "string")
name.pass <- c("fac", "FAC", "Fac")
name.fail <- list(bool = TRUE, dec = 100.00, int = 1000)
region.pass <- c("reg", "REG", "Reg")
region.fail <- list(bool = TRUE, dec = 100.00, int = 1000)
strategy.pass <- c("8_REASONS", "REPLENISH", "ORDER_POINT", "8_reasons", "replenish", "order_point", "8_Reasons", "Replenish", "Order_Point")
strategy.fail <- list(bool = TRUE, dec = 100.00, int = 1000)
shipment_size.pass <- c(10, 1000, 10000)
shipment_size.fail <- list(bool = TRUE,  char = "string")
orders_per_week.pass <- c(1,3,6)
orders_per_week.fail <- list(num1 = 8, num2 = -1, num3 = 0, bool = TRUE,  char = "string")
test_that("Background class loads data & returns properly",
{
### fails first
for (d in 1:length(days.fail)) {
expect_that(background_class(days.fail[[d]], name.pass[1], region.pass[1],
strategy.pass[1], shipment_size.pass[1], orders_per_week.pass[1]),
throws_error())
}
context("Background Class")
test_that("Background class loads data & returns properly",
{
### fails first
for (d in 1:length(days.fail)) {
expect_that(background_class(days.fail[[d]], name.pass[1], region.pass[1],
strategy.pass[1], shipment_size.pass[1], orders_per_week.pass[1]),
throws_error())
}
)
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
floor(0)
floor(8)
floor(as.numeric(8))
floor(as.numeric(0))
as.numeric(floor(0))
as.numeric(floor(8))
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
length("..................")
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
traceback()
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
traceback()
for (z in 1:length(shipment_size.fail)) {}
for (z in 1:length(shipment_size.fail)) {
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.fail[[z]],
ORDERS_PER_WEEK = orders_per_week.pass[1])
}
z <- 1
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.fail[[z]],
ORDERS_PER_WEEK = orders_per_week.pass[1])
for (s in 1:length(strategy.fail)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.fail[[s]], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
throws_error())
}
for (z in 1:length(shipment_size.fail)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.fail[[z]],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
throws_error())
}
for (o in 1:length(orders_per_week.fail)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.fail[[o]]),
throws_error())
}
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
context("Background Class Loads Properly")
expect_that("Background Class Loads Properly",
{
for (d in 1:length(days.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[d], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data"))
}
for (n in 1:length(name.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[n], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data"))
}
for (r in 1:length(region.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[r],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data"))
}
for (s in 1:length(strategy.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[s], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data"))
}
for (z in 1:length(shipment_size.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.fail[[z]],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data"))
}
for (o in 1:length(orders_per_week.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[1], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], SHIPMENT_SIZE = shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.fail[[o]]),
is_a("background_data"))
}
)
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
traceback()
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/inst/tests/')
source('C:/Users/a421356/R-GitHub/SCsim/R/background.R')
test_dir('C:/Users/a421356/R-GitHub/SCsim/inst/tests/')
for (d in 1:length(days.pass)) {
expect_that(
background_class(TOTAL_DAYS = days.pass[d], NAME = name.pass[1], REGION = region.pass[1],
STRATEGY = strategy.pass[1], shipment_size.pass[1],
ORDERS_PER_WEEK = orders_per_week.pass[1]),
is_a("background_data")
)
}
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-background.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
.dd <- setRefClass(
"dynamic_data",
fields = list(
on_hand_inventory = "numeric",
pipeline_target = "numeric",
in_transit_order = "numeric",
demand_target = "numeric",
order_volume = "numeric",
release_date = "numeric",
delivered = "logical",
in_transit_volume = "numeric"
)
a <- .dd$new()
source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
# source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-dynamic_data.R')
logical(5)
library(testthat)
# source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
# test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-dynamic_data.R')
#  (ON_HAND_INVENTORY, SIMULATION_DAYS)
#### TEST OBJECTS ------
oh.pass <- 100
oh.fail <- list(num = 100:101, char = "string", bool = TRUE)
days.pass <- 250
days.fail <- list(num = 100:101, char = "string", bool = TRUE)
#### Dynamic Data Class - Loads Correctly ----
context("Dynamic Data Class - Loads Correctly")
test_that("Dynamic Data Class - Loads Correctly"
expect_that(dynamic_data(oh.pass, days.pass), is_a("dynamic_data"))
)
source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-dynamic_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/dynamic_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-dynamic_data.R')
sd <- static_data(ACTUAL_DEMAND = act.pass, EXPECTED_DEMAND = exp.pass,
OPERATING_SCHEDULE = operate.pass, ORDERING_SCHEDULE = order.pass,
DISRUPTION = disrupt.pass, TRANSIT_TIME = transit.pass)
sd$getActualDemand(1)
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
act.pass <- 1:100
exp.pass <- 1:100
operate.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
order.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
disrupt.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
transit.pass <- as.matrix(cbind(1:100, 100:1))
sd <- static_data(ACTUAL_DEMAND = act.pass, EXPECTED_DEMAND = exp.pass,
OPERATING_SCHEDULE = operate.pass, ORDERING_SCHEDULE = order.pass,
DISRUPTION = disrupt.pass, TRANSIT_TIME = transit.pass)
sd$getActualDemand(1)
expect_that(TRUE, equals(TRUE))
expect_that(TRUE, equals(FALSE))
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
act.pass <- sample(1:100, size = 100, replace = TRUE)
exp.pass <- sample(1:100, size = 100, replace = TRUE)
operate.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
order.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
disrupt.pass <- sample(c(TRUE, FALSE), size = 100, replace = TRUE)
transit.pass <- as.matrix(
cbind(
sample(1:100, size = 100, replace = TRUE),
sample(1:100, size = 100, replace = TRUE)
)
TIME <- floor(length(act.pass) / 3)
RANGE <- 10
sd <- static_data(ACTUAL_DEMAND = act.pass, EXPECTED_DEMAND = exp.pass,
OPERATING_SCHEDULE = operate.pass, ORDERING_SCHEDULE = order.pass,
DISRUPTION = disrupt.pass, TRANSIT_TIME = transit.pass)
sd$isOperating(TIME)
sd$operating_schedule[TIME]
operate.pass[TIME]
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
rowSums(matrix(1:6, ncol=2,byrow= TRUE))
matrix(1:6, ncol=2,byrow= TRUE)
as.matrix(rowSums(matrix(1:6, ncol=2,byrow= TRUE), na.rm = TRUE), ncol=1)
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
source('C:/Users/a421356/R-GitHub/SCsim/R/static_data.R')
test_file('C:/Users/a421356/R-GitHub/SCsim/inst/tests/test-static_data.R')
